// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User authentication and profile
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  cart      Cart?
  orders    Order[]
  reviews   Review[]
}

// Product catalog
model Product {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int       @default(0)
  imageUrl    String?
  category    String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  orderItems OrderItem[]
  cartItems  CartItem[]
  reviews    Review[]
}

// Shopping cart
model Cart {
  id        String    @id @default(uuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Cart items
model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  
  @@unique([cartId, productId])
}

// Customer orders
model Order {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  total       Float
  status      OrderStatus @default(PENDING)
  shippingAddress String?
  paymentMethod  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Order items
model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order     @relation(fields: [orderId], references: [id])
  productId String
  product   Product   @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

// Product reviews
model Review {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, productId])
}

// Enums
enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

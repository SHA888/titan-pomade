name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: 18.x
  PG_VERSION: 16
  MEILI_VERSION: latest

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.PG_VERSION }}
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.x

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Set up environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/test" >> .env

      - name: Run Linting
        run: pnpm lint

      - name: Run Tests
        run: pnpm test

  build:
    name: Build
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.x
          
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build Application
        run: pnpm build
        
      - name: Run Database Migrations
        run: pnpm db:migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
      - name: Deploy to Production
        if: success()
        run: echo "Deployment would happen here"

name: Deploy

# Template-friendly: this workflow only runs when manually dispatched.
# It does NOT auto-deploy on pushes. Safe to keep in template repos.
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (staging|production)'
        required: true
        default: 'staging'

env:
  NODE_VERSION: 18.x
  REGISTRY: ghcr.io

jobs:
  determine-env:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.setenv.outputs.environment }}
      tag: ${{ steps.setenv.outputs.tag }}
    steps:
      - id: setenv
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "tag=prod-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "tag=stg-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          else
            # workflow_dispatch fallback
            echo "environment=${{ inputs.environment || 'staging' }}" >> $GITHUB_OUTPUT
            echo "tag=manual-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    name: Build and Push Images
    needs: determine-env
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-env.outputs.environment }}
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        service: [api, web]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image name
        id: meta
        run: |
          IMAGE_BASE="${{ env.REGISTRY }}/${{ github.repository }}-${{ matrix.service }}"
          echo "image=${IMAGE_BASE}" >> $GITHUB_OUTPUT
          echo "tag=${{ needs.determine-env.outputs.tag }}" >> $GITHUB_OUTPUT

      - name: Build and push ${{ matrix.service }} image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/prod/Dockerfile
          push: true
          target: ${{ matrix.service == 'api' && 'production' || 'web' }}
          tags: |
            ${{ steps.meta.outputs.image }}:${{ steps.meta.outputs.tag }}
            ${{ steps.meta.outputs.image }}:latest
          build-args: |
            NODE_ENV=production

  migrate-db:
    name: Run Database Migrations
    needs: [determine-env, build-and-push]
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-env.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 8.x
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run Prisma migrate deploy (optional)
        env:
          DATABASE_URL_STAGING: ${{ secrets.DATABASE_URL_STAGING }}
          DATABASE_URL_PROD: ${{ secrets.DATABASE_URL_PROD }}
          TARGET_ENV: ${{ needs.determine-env.outputs.environment }}
        run: |
          if [ "$TARGET_ENV" = "production" ]; then
            DB_URL="$DATABASE_URL_PROD"
          else
            DB_URL="$DATABASE_URL_STAGING"
          fi
          if [ -z "$DB_URL" ]; then
            echo "No DATABASE_URL secret provided for $TARGET_ENV; skipping migrations."
            exit 0
          fi
          export DATABASE_URL="$DB_URL"
          pnpm --filter @titan-pomade/api db:migrate:deploy

  notify:
    name: Notify
    needs: [determine-env, build-and-push, migrate-db]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Slack notification (optional)
        if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        env:
          WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          STATUS: ${{ needs.build-and-push.result == 'success' && needs.migrate-db.result == 'success' && 'success' || 'failure' }}
          ENVIRONMENT: ${{ needs.determine-env.outputs.environment }}
        run: |
          payload='{
            "text": "Deploy to '${ENVIRONMENT}' ${STATUS} for ${{ github.repository }}@${{ github.sha }}"
          }'
          curl -X POST -H 'Content-type: application/json' --data "$payload" "$WEBHOOK"
